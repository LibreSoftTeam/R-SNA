#!/usr/bin/python
# -*- coding: iso-8859-15 -*-

# gdhelper - LibreSoft, June 2015

"""

This script helps to adapt collaboration graphs generated by
GraphDataCreator.py into other formats.
This program calculates weights of all nodes and print the graph
in <node1,node2,weight> format.

When -n option is activated, node1 and node2 which are names (strings)
are converted into integer numbers (A different integer is assigned to each
name found).

Output: A file whose name is specified by command-line
when the program is executed.

"""

import sys
import os


data = sys.argv
dicc_nodes = {}
num_opt = '-n'
num_opt_on = False

usage = "Usage: $python gdhelper.py <file> <output_filename.csv> option\r\n"
usage += "Options: -n --> converts string-type nodes to integer-type ones\n"


if (len(data) < 3) or (len(data) > 4):
    print usage
    raise SystemExit
elif len(data) == 4:
        if data[3] == num_opt:
            num_opt_on = True

viewed_lines = {}
temp_counter = 0
filename = data[1]

try:
    node_file = open(filename,'r')
except IOError:
    print "File not valid. Please check it"
    print usage
    raise SystemExit

lines_node = node_file.readlines()
count = 0
dicc_nodes = {}

for node in lines_node:

    if node not in viewed_lines.keys():
        viewed_lines[node] = 1
    else:
        temp_counter = viewed_lines[node]
        temp_counter += 1
        viewed_lines[node] = temp_counter
        
    nodes = node.split(",")
    
    if len(nodes) >= 3:
        print "Graph format not supported or already converted"
        raise SystemExit
    node1 = nodes[0]
    node2 = nodes[1]
    if node1 not in dicc_nodes.keys():
        dicc_nodes[node1] = 1
    else:
        counter = dicc_nodes[node1]
        counter += 1
        dicc_nodes[node1] = counter

    if node2 not in dicc_nodes.keys():
        dicc_nodes[node2] = 1
    else:
        counter = dicc_nodes[node2]
        counter += 1
        dicc_nodes[node2] = counter


line = filename + "," + str(len(dicc_nodes.keys()))
num_collab = len(lines_node) / 2
line += "," + str(num_collab)
print line + "\r\n"

list_nodes = dicc_nodes.keys()
num_nodes = {}
if num_opt_on:
    for node in list_nodes:
        num_nodes[node] = list_nodes.index(node)

data_final = open(data[2], 'w')
data_final.close()
data_final = open(data[2], 'a')

for node in viewed_lines.keys():
    nodes = node.split(",")
    node1 = nodes[0]
    node2 = nodes[1]   
    if num_opt_on:
        num1 = num_nodes[node1]
        num2 = num_nodes[node2]
        line_wr = str(num1) + "," + str(num2) + "," + str(viewed_lines[node])
    else:
        line_wr = node[:-1] + "," + str(viewed_lines[node])
    data_final.write(line_wr + "\r\n")


data_final.close()
print "End of program\r\n"

